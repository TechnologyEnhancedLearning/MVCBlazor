@using AutoFixture
@using FluentAssertions
@using Moq
@using Package.LH.BlazorComponents.UnitTests.DependencyInjection
@using Package.LH.BlazorComponents.UnitTests.TestDoubles
@using Package.LH.Entities.Models
@using Package.LH.Services.StateServices
@using Package.Shared.BlazorComponents.BaseComponents.Buttons
@using Package.Shared.BlazorComponents.Components.Lists
@using Package.Shared.BlazorComponents.Core
@using Package.Shared.Entities.Communication
@using Package.Shared.Entities.Models
@using Package.Shared.Services.ComponentServices
@using Package.Shared.Services.StateServices.CharacterStateServices
@using Package.LH.BlazorComponents.Components.Test_Components
@using Package.Shared.BlazorComponents.UnitTests.DependencyInjection
@using Microsoft.AspNetCore.Components @*only added to enable @<mycomponent /> syntax if not worked remove*@
@inherits TestContext

@code{

    private readonly Fixture _fixture;

    public LHB_Attendees_RemoveListForm_Page_TestComponent_Test()
    {
        // Initialize AutoFixture
        _fixture = new Fixture();
    }

    /// <summary>
    /// Creates and configures a TestContext for Razor tests.
    /// </summary>
    /// <param name="JSIsEnabled">Set to true if JavaScript is enabled in the test environment.</param>
    /// <returns>A configured TestContext instance.</returns>
    private TestContext CreateTestContext(bool JSIsEnabled)//Require it so remember to test it
    {
        //Arrange
        var ctx = new TestContext();

        // Add fallback service provider
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());

        // Create a mock of IGS_JSEnabled
        var mockJSEnabled = new Mock<IGS_JSEnabled>();
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(JSIsEnabled); // Mock behavior for JSIsEnabled
        mockJSEnabled.Setup(js => js.TestingWhoAmI).Returns("MockedHost"); // Mock behavior for WhoAmI

        // Register the mock service in the service collection
        ctx.Services.AddScoped(_ => mockJSEnabled.Object);

        return ctx;
    }

    [Trait("Category", "Unit Test")]
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void RemoveListItem_UpdatesUI(bool JSIsEnabled)
    {

        @if (!JSIsEnabled) { throw new NotImplementedException("This should in fact fail if nojs TestContext behaved as statically rendered"); }

        // Arrange
        TestContext ctxJSEnabled = CreateTestContext(JSIsEnabled);
        ctxJSEnabled.Services.AddTestDouble_LHS_AttendeesStateServices();
        var noJSActionUrl = _fixture.Create<string>();

  
        //Render component
        var cut = ctxJSEnabled.RenderComponent<LHB_Attendees_RemoveListForm_Page_TestComponent>();

        //Take snapshot of initial
        cut.SaveSnapshot();
        var initialMarkup = cut.Markup;
        int initialRemoveButtonCount = cut.FindAll(".danger-list-item-btn").Count();
        
        //Act
        var firstRemoveButton = cut.Find(".danger-list-item-btn");
        firstRemoveButton.Click();

        //Capture change
        var diff = cut.GetChangesSinceSnapshot();
        var currentMarkup = cut.Markup;
        int finalRemoveButtonCount = cut.FindAll(".danger-list-item-btn").Count();
        
        
        //Assert
        //Verify Dom changes
        Assert.True(diff.Count() > 0);

        //Veritfy Markup
        Assert.NotEqual(initialMarkup, currentMarkup);

        //Verify button count
        Assert.Equal(initialRemoveButtonCount - 1, finalRemoveButtonCount);

    }

    /// <summary>
    /// Here we are testing efficiency of the rerender but also trying some BUnit features.
    /// QQQQ very much in progress
    /// </summary>
    /// <param name="JSIsEnabled"></param>
    /// <exception cref="NotImplementedException"></exception>
    [Trait("Category", "Unit Test")]
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void RemoveListItem_RendersEfficientlyWithSingleChange(bool JSIsEnabled)
    {

        @if (!JSIsEnabled) { throw new NotImplementedException("This should in fact fail if nojs TestContext behaved as statically rendered"); }

        // Arrange

        TestContext ctxJSEnabled = CreateTestContext(JSIsEnabled);
        //Fake state service
        ctxJSEnabled.Services.AddTestDouble_LHS_AttendeesStateServices();
        var noJSActionUrl = _fixture.Create<string>();

        var cut = ctxJSEnabled.RenderComponent<LHB_Attendees_RemoveListForm_Page_TestComponent>();

        // Take an intial snapshot for Dom diff comparison
        cut.SaveSnapshot();
        var firstMarkup = cut.Markup;

       // Act: Simulate clicking the first "Remove" button
        var firstRemoveButton = cut.Find(".danger-list-item-btn");
        firstRemoveButton.Click();

        // Act: Simulate clicking the first "Remove" button
        var diff = cut.GetChangesSinceSnapshot();
        var currentMarkup = cut.Markup;
        //qqqq  TODO: Getting 596 this indicates I am inefficiently rerendering though it may be unavoidable, come back to this after statehandling task?


        //Capture
        var firstRemoveButtonMarkup = firstRemoveButton.ToMarkup();

        //Assert
       
        
        //Validate Markup
        //This is to check we have the button
        firstRemoveButton.MarkupMatches(@"<button diff:ignoreAttributes diff:ignoreChildren></button>");
        firstRemoveButton.MarkupMatches(@"<button type=""submit""
                    class=""nhsuk-generic-button nhsuk-danger-button nhsuk-inline-button danger-list-item-btn""
                    aria-label:ignore
                    aria-role:ignore
                    aria-describedby:ignore
                    title=""Remove the attendee from the list"" 
                    tabindex=""0""
                    diff:ignoreChildren></button>");
        

        // QQQQ TODO: We want to have an example of using diff so come back to his how do we do does not contain markup well?
        // Verify markup not present (can grab by element type and check dispoe)
        Assert.False(currentMarkup.ToString().Contains(firstRemoveButton.ToString()));
        
        // Verify Diff Dom Efficiently Changed
        diff.ShouldHaveChanges(
            diff => diff.ShouldBeRemoval(@"<li diff:ignoreAttributes diff:ignoreChildren></li>")//,
              //diff => diff.ShouldBeAddition("<li>Second item</li>")
                );
        diff.ShouldHaveSingleChange();
        diff.ShouldHaveSingleChange().ShouldBeRemoval(@"<li diff:ignoreAttributes diff:ignoreChildren></li>");

    }


    [Trait("Category", "Unit Test")]
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void UsingComponentInstances_RemoveButtonRemovesElementAndAttendee(bool JSIsEnabled)
    {

        @if (!JSIsEnabled) { throw new NotImplementedException("This should in fact fail if nojs TestContext behaved as statically rendered"); }

        // Arrange
        TestContext ctxJSEnabled = CreateTestContext(JSIsEnabled);
        ctxJSEnabled.Services.AddTestDouble_LHS_AttendeesStateServices();
        var attendeesStateService = ctxJSEnabled.Services.GetService<ILHS_AttendeesStateService>();
        int originalAttendeesStateServiceAttendeesCount = attendeesStateService?.Attendees.Count()??0;
        var noJSActionUrl = _fixture.Create<string>();

        var cut = ctxJSEnabled.RenderComponent<LHB_Attendees_RemoveListForm_Page_TestComponent>();


        var canWeGrabIt = cut.FindComponent<LHB_Attendees_RemoveListForm_TestComponent>();
        var canWeGrabIt1 = cut.FindComponent<Shared.BlazorComponents.Components.Lists.GB_ListWithButtons<LH_AttendeeModel>>();
        var canWeGrabIt2 = cut.FindComponent<GB_Button2>();

        var canWeGrabItFromAnother = canWeGrabIt.FindComponent<Shared.BlazorComponents.Components.Lists.GB_ListWithButtons<LH_AttendeeModel>>();
        int ItemsCount = canWeGrabItFromAnother.Instance.Items.Count();
        var canWeGrabItFromAnother1 = canWeGrabItFromAnother.FindComponent<GB_Button2>();

        //Ah it is hidden somewhere!
        string ClientTemporaryId = canWeGrabItFromAnother1.Instance.FormData["clientTemporaryId"];
        canWeGrabItFromAnother1.Find("button").Click();



        // Assert

        //Our button is made with a render fragment and an event it has no exposed reference to the LH_Attendee
        Assert.True(canWeGrabItFromAnother1.IsDisposed);
        Assert.Equal(ItemsCount -1, canWeGrabItFromAnother.Instance.Items.Count());

        Assert.True(canWeGrabIt2.IsDisposed);
        Assert.Equal(ItemsCount - 1, canWeGrabIt1.Instance.Items.Count());

        Assert.Equal(canWeGrabIt.Instance.Attendees.Count(), canWeGrabIt1.Instance.Items.Count());

        Assert.Equal(originalAttendeesStateServiceAttendeesCount - 1, attendeesStateService?.Attendees.Count());

        Assert.DoesNotContain(ClientTemporaryId, attendeesStateService?.Attendees.Select(x => x.ClientTemporaryId).Select(x =>x.ToString()).ToList());

        attendeesStateService?.Attendees.Should().NotContain(x => x.ClientTemporaryId.ToString() == ClientTemporaryId);
    }



    [Trait("Category", "Unit Test")]
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public async Task SaveButton_TriggersHandleSubmitAndUpdatesState(bool JSIsEnabled)
    {

        // Arrange
        TestContext ctxJSEnabled = CreateTestContext(JSIsEnabled);
        ctxJSEnabled.Services.AddTestDouble_LHS_AttendeesStateServices();
        var noJSActionUrl = _fixture.Create<string>();

        // We have injected as the same service IFAKE_LHS_AttendeesStateServices and ILHS_AttendeesStateServices
        // So we can track behaviour QQQQ TODO: Can we acheive this with logging instead?
        IFAKE_LHS_AttendeesStateServices attendeesStateService = ctxJSEnabled.Services.GetService<IFAKE_LHS_AttendeesStateServices>();

        List<LH_AttendeeModel> attendees = attendeesStateService.Attendees;
        //Freeze
        GE_ServiceResponse<List<LH_AttendeeModel>> initialServiceResponse =
        new GE_ServiceResponse<List<LH_AttendeeModel>>
            {
                Success = attendeesStateService.T_LastServiceResponse.Success,
                Message = attendeesStateService.T_LastServiceResponse.Message,
                Data = attendeesStateService.T_LastServiceResponse.Data
            };

        //Act
        var cut = ctxJSEnabled.RenderComponent<LHB_Attendees_RemoveListForm_Page_TestComponent>();

        @if (!JSIsEnabled)
        {
            //Assert
            Assert.Empty(cut.FindAll(".update-db"));

        }
        else
        {
            //Act
            var updateDbButton = cut.Find(".update-db"); //NoJs does not have this button due to having to constantly save data
            updateDbButton.Click();
            await Task.Delay(3000);
           
            // Verify service initiral response initialised empty
            initialServiceResponse.Should().BeEquivalentTo(new GE_ServiceResponse<List<LH_AttendeeModel>>());
            
            // Verify service has data
            Assert.NotEmpty(attendees);

            //Verify the response had the attendees
            attendeesStateService.T_LastServiceResponse.Should().BeEquivalentTo(
            new GE_ServiceResponse<List<LH_AttendeeModel>>()
                {
                    Success = true,
                    Message = "",
                    Data = attendees
                });

            //Verify same objects not recreated
            Assert.Equal(attendeesStateService.T_LastServiceResponse.Data, attendeesStateService.Attendees);
        }

    }
}
