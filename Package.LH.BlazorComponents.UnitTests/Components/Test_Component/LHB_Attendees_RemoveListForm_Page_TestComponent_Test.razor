@using AutoFixture
@using Moq
@using Package.LH.BlazorComponents.UnitTests.DependencyInjection
@using Package.LH.BlazorComponents.UnitTests.TestDoubles
@using Package.LH.Entities.Models
@using Package.LH.Services.StateServices
@using Package.Shared.BlazorComponents.BaseComponents.Buttons
@using Package.Shared.BlazorComponents.Components.Lists
@using Package.Shared.BlazorComponents.Core
@using Package.Shared.Entities.Models
@using Package.Shared.Services.ComponentServices
@using Package.Shared.Services.StateServices.CharacterStateServices
@using Package.LH.BlazorComponents.Components.Test_Components
@using Package.Shared.BlazorComponents.UnitTests.DependencyInjection
@using Microsoft.AspNetCore.Components @*only added to enable @<mycomponent /> syntax if not worked remove*@
@inherits TestContext

@code{

    private readonly Fixture _fixture;

    public LHB_Attendees_RemoveListForm_Page_TestComponent_Test()
    {
        // Initialize AutoFixture
        _fixture = new Fixture();
    }

    private TestContext GetTestContext(bool JSIsEnabled)
    {
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());


        // Create a mock of IGS_JSEnabled
        var mockJSEnabled = new Mock<IGS_JSEnabled>();
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(JSIsEnabled); // Mock behavior for JSIsEnabled
        mockJSEnabled.Setup(js => js.TestingWhoAmI).Returns("MockedHost"); // Mock behavior for WhoAmI

        ctx.Services.AddScoped(_ => mockJSEnabled.Object);

        return ctx;

    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LHB_Attendees_RemoveListForm_Page_TestComponent_UpdatesUIAfterAttendeeRemoved(bool JSIsEnabled)
    {

        @if (!JSIsEnabled) { throw new NotImplementedException("This should in fact fail if nojs TestContext behaved as statically rendered"); }

        // Arrange
        TestContext ctxJSEnabled = GetTestContext(JSIsEnabled);
        ctxJSEnabled.Services.AddTestDouble_LHS_AttendeesStateServices();
        var noJSActionUrl = _fixture.Create<string>();

        var cut = ctxJSEnabled.RenderComponent<LHB_Attendees_RemoveListForm_Page_TestComponent>();

        cut.SaveSnapshot();

        //Click the first remove button
        var firstRemoveButton = cut.Find(".danger-list-item-btn");
        firstRemoveButton.Click();
        var diff = cut.GetChangesSinceSnapshot();
        diff.ShouldHaveSingleChange();
        //Getting 596 this indicates I am inefficiently rerendering possibly because i should have used key?
        //This is an advantage over just comparing string
        var diff2 = cut.GetChangesSinceFirstRender();
        diff.ShouldHaveSingleChange().ShouldBeRemoval(firstRemoveButton.ToString());

       // Assert.DoesNotContain(firstRemoveButton.ToString(), cut.Markup);
    }
}
