@using Moq
@using Package.Shared.BlazorComponents.Components.Lists
@inherits TestContext
@using Package.Shared.BlazorComponents.Core
@using Package.Shared.BlazorComponents.UnitTests.DependencyInjection
@using Package.Shared.BlazorComponents.UnitTests.TestComponent_Example
@using Package.Shared.Entities.Models
@using Package.Shared.Services.ComponentServices
@using Package.Shared.Services.StateServices.CharacterStateServices


@code {

    //Will use shared set up for the real component test these test are just to show the different set up parts
    /*

    public TestBaseComponentTests()
    {
    }

    private TestContext GetTestContext()
    {
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());
        return ctx;
    }

    */

    [Fact]
    public void Service_Setup_Test_Fallback()
    {

        // Arrange
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());

        // Act
        var cut = ctx.RenderComponent<TestBaseComponent>();

        // Assert
        Assert.Equal("DefaultTestTitleText", cut.Find("h1").TextContent);
        Assert.Equal("False", cut.Find(".TestJSIsEnabledClass").TextContent); // Check IJSEnabled autofixture defaults False
        Assert.Contains("TestingWhoAmI", cut.Find(".TestWhoAmIClass").TextContent);//Autofixture will take the name and add a guid
        Assert.False(cut.Instance.TestJSIsEnabled);//AutoFixture bool defaults False
        Assert.Equal("DefaultTestTitleText", cut.Instance.TestTitleText);

    }

    [Fact]
    public void Service_Setup_Test_Mock()
    {
        // Arrange
        var ctx = new TestContext(); 
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());

        // Create a mock of IGS_JSEnabled
        var mockJSEnabled = new Mock<IGS_JSEnabled>();
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(true); // Mock behavior for JSIsEnabled
        mockJSEnabled.Setup(js => js.TestingWhoAmI).Returns("MockedHost"); // Mock behavior for WhoAmI

        ctx.Services.AddScoped(_ => mockJSEnabled.Object);


        // Act
        var cut = ctx.RenderComponent<TestBaseComponent>();


        // Assert: Verify the component's behavior based on the mock
        //Using the elements
        Assert.Equal("DefaultTestTitleText", cut.Find("h1").TextContent); // Check title
        Assert.Equal("True", cut.Find(".TestJSIsEnabledClass").TextContent); // Check JSIsEnabled mock the mock doesnt seem to be overwriting the fallback
        Assert.Equal("MockedHost", cut.Find(".TestWhoAmIClass").TextContent); // Check WhoAmI mock
        Assert.True(cut.Instance.TestJSIsEnabled);
        Assert.NotNull(cut.Instance.TestWhoAmI);
        Assert.Equal("MockedHost", cut.Instance.TestWhoAmI);
        Assert.Equal("DefaultTestTitleText", cut.Instance.TestTitleText);

        //Arrange again
        // Here checking NoJS behaviour too
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(false);

        //Act again
        cut = ctx.RenderComponent<TestBaseComponent>(); // Re-render component after mock change

        //Assert
        Assert.Equal("False", cut.Find(".TestJSIsEnabledClass").TextContent); // Verify updated mock behavior
        Assert.False(cut.Instance.TestJSIsEnabled);
    }

    [Fact]
    public void Service_Setup_Test_Fake()
    {
        // Arrange
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());
        ctx.Services.AddTestDouble_GS_StateServices();


        // Act
        var cut = ctx.RenderComponent<TestBaseComponent>();

        //Asserts

        Assert.True(cut.Find(".CharactersStateServiceClass").TextContent.Length > 0);
        Assert.NotNull(ctx.Services.GetService<IGS_CharactersStateService>().Characters);
        Assert.NotEmpty(ctx.Services.GetService<IGS_CharactersStateService>().Characters);

    }

    [Fact]
    public void Service_Setup_Test_MockedFake()
    {
        // Arrange
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());
        ctx.Services.AddTestDouble_GS_StateServices();


        // Create a mock of IGS_JSEnabled
        var mockGS_CharactersStateService = new Mock<IGS_CharactersStateService>();
        mockGS_CharactersStateService.Setup(css => css.Characters)
            .Returns(
                new List<GE_CharacterModel> {
                    new GE_CharacterModel { FirstName = "MockedFirstNameTest" }
                    });

        ctx.Services.AddScoped(_ => mockGS_CharactersStateService.Object);


        // Act
        var cut = ctx.RenderComponent<TestBaseComponent>();

        //Asserts

        Assert.True(cut.Find(".CharactersStateServiceClass").TextContent.Length > 0);
        Assert.NotNull(ctx.Services.GetService<IGS_CharactersStateService>().Characters);
        Assert.NotEmpty(ctx.Services.GetService<IGS_CharactersStateService>().Characters);
        Assert.Equal("MockedFirstNameTest", cut.Find(".CharactersStateServiceClass").TextContent);

    }
}