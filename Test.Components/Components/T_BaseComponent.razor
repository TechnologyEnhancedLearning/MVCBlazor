@using Package.Shared.BlazorComponents.Core
@using Package.Shared.BlazorComponents.UnitTests.TestComponent_Example
@using Package.Shared.Services.StateServices.CharacterStateServices
@inherits GB_ComponentBase
@inject IT_ComponentService TestComponentService
@inject IGS_CharactersStateService CharactersStateService


<p>@TestComponentService.TestString</p>


<h1>@TestTitleText</h1>
<p class="TestJSIsEnabledClass">@(TestJSIsEnabled.ToString())</p>
<p class="TestWhoAmIClass">@(WhoAmI.ToString())</p>
@if (UseTestServiceValue)
{
    <p class="TestServiceTestBoolClass">@(TestComponentService.TestBool.ToString())</p>
    <p class="TestServiceTestStringClass">@(TestComponentService.TestString)</p>
}

<h3 class="CharactersStateServiceClass">@CharactersStateService.Characters[0].FirstName</h3>

<h3>@hydrationStatus</h3>
<h3>Life Cycle Stages So Far</h3>
<ol class="life-cycle-stage-list">
    @for (int i = 0; i < LifecycleStages.Count(); i++)
    {
        <li class="life-cycle-stage-item">LifecycleStages[i]</li>
    
    }
</ol>

@code{

    public bool TestJSIsEnabled => JSIsEnabled;
    public string TestWhoAmI => WhoAmI;
    public string TestTitleText { get; set; } = "DefaultTestTitleText";
    public bool UseTestServiceValue { get; set; } = false; //This is to check mocking works when injection not used and fails when injection is used because params are not utilised


    public bool isHydrated = false; // Flag to track hydration state
    public string hydrationStatus = "I'm prerendered"; // Default hydrationStatus for prerendering



    public List<string> LifecycleStages { get; set; } = new();

    public override Task SetParametersAsync(ParameterView parameters)
    {
       
        LifecycleStages.Add("SetParametersAsync");
        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        LifecycleStages.Add("OnInitialized");

    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        LifecycleStages.Add("OnInitializedAsync");
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        LifecycleStages.Add("OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1000);
        LifecycleStages.Add("OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {

        LifecycleStages.Add($"OnAfterRender(firstRender: {firstRender})");
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(1000);
        if (firstRender) // Executes only once after the component is rendered for the first time
        {
            // If the component is rendered for the first time on the client, mark as hydrated
            isHydrated = true;

            // Update the hydrationStatus to indicate that the component is hydrated
            hydrationStatus = "I'm hydrated";

            // Request a re-render of the component to display the updated hydrationStatus
            StateHasChanged(); //because this is async
        }
        LifecycleStages.Add($"OnAfterRenderAsync(firstRender: {firstRender})");
        await base.OnAfterRenderAsync(firstRender);
        //StateHasChanged();
    }
}