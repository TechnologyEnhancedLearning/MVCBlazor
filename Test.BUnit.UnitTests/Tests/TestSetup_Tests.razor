@using Bunit.Rendering
@using Microsoft.AspNetCore.Components.Rendering
@using Moq
@using Package.Shared.BlazorComponents.Components.Lists
@* @inherits TestContext *@ @* Try defining per example*@
@using Package.Shared.BlazorComponents.Core

@using Package.Shared.BlazorComponents.UnitTests.TestComponent_Example
@using Package.Shared.Entities.Models
@using Package.Shared.Services.ComponentServices
@using Package.Shared.Services.StateServices.CharacterStateServices
@using System.Diagnostics

@using System.IO
@using Test.BUnit.UnitTests.DependencyInjection
@using Test.BUnit.UnitTests.HtmlComparisons
@using Test.BUnit.UnitTests.TestDoubles
@using Test.Components.Components



@code {

    //Will use shared set up for the real component test these test are just to show the different set up parts



    private readonly Fixture _fixture;

    public TestSetup_Tests()
    {
        // Initialize AutoFixture
        _fixture = new Fixture();
    }

    private TestContext GetTestContext(bool JSIsEnabled)//Require it so remember to test it
    {
        //Arrange

        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());

        // Create a mock of IGS_JSEnabled
        var mockJSEnabled = new Mock<IGS_JSEnabled>();
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(JSIsEnabled); // Mock behavior for JSIsEnabled
        mockJSEnabled.Setup(js => js.TestingWhoAmI).Returns("MockedHost"); // Mock behavior for WhoAmI

        ctx.Services.AddScoped(_ => mockJSEnabled.Object);

        return ctx;
    }


    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void TestSetup_GetTestContext_IGS_JS_Enabled_IsSet(bool JSIsEnabled)
    {
        // Arrange
        TestContext ctxJSEnabled = GetTestContext(JSIsEnabled);

        // Act
        var cut = ctxJSEnabled.RenderComponent<T_BaseComponent>();


        // Assert: Verify the component's behavior based on the mock
        //Using the elements
        Assert.Equal(JSIsEnabled.ToString(), cut.Find(".TestJSIsEnabledClass").TextContent); // Check JSIsEnabled mock the mock doesnt seem to be overwriting the fallback
        Assert.Equal("MockedHost", cut.Find(".TestWhoAmIClass").TextContent); // Check WhoAmI mock
        Assert.Equal(JSIsEnabled, cut.Instance.TestJSIsEnabled);
        Assert.NotNull(cut.Instance.TestWhoAmI);
        Assert.Equal("MockedHost", cut.Instance.TestWhoAmI);

        //Assert Component rendered
        Assert.Equal("DefaultTestTitleText", cut.Find("h1").TextContent); // Check title
        Assert.Equal("DefaultTestTitleText", cut.Instance.TestTitleText);

    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void TestSetup_T_JSSetup_HydrationIsSimulated(bool JSIsEnabled)
    {
        // Arrange
        TestContext ctxJSEnabled = GetTestContext(JSIsEnabled);

        // Act
        var cut = ctxJSEnabled.RenderComponent<T_JSSetup>();

        //Wait for button to be revealed
        cut.WaitForAssertion(()=>
                 Assert.True(
                   JSIsEnabled == cut.Instance.isHydrated,
                   JSIsEnabled ? null : "We are not yet modeling the correct lifecycle stage for nojs with our test context"
                )
            , TimeSpan.FromSeconds(5));

        Assert.Equal(JSIsEnabled.ToString(), cut.Find("#IsHydrated").TextContent);

    }

    /// <summary>
    /// This test is to show async Bunit testing features as well
    /// It shows some wait functionality
    /// </summary>
    /// <param name="JSIsEnabled"></param>
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void TestSetup_T_JSSetup_WaitingExample_InteractivityIsSimulated(bool JSIsEnabled)
    {

        // Arrange
        TestContext ctxJSEnabled = GetTestContext(JSIsEnabled);

        // Act
        var cut = ctxJSEnabled.RenderComponent<T_JSSetup>(parameters
            => parameters.Add(p => p.waitForHydrationToShowButton, JSIsEnabled)); 
        //Note: This parameter is just so we have an example of the waiting BUnit functionality in the project.


        //Wait for button to be revealed
        cut.WaitForElement("#OnInteractivityTestButton", TimeSpan.FromSeconds(5));

        //Grab the button
        var interactiveButton = cut.Find("#OnInteractivityTestButton");

        //Click it
        interactiveButton.Click();

        cut.WaitForState(() => cut.Instance.clickCompleted, TimeSpan.FromSeconds(10));
        var interactiveButtonContent = cut.Find("#OnInteractivityTestButtonClickMessage").TextContent;

        //Assert
        //(It shouldnt be interactive if Js is disabled)
        Assert.True(
            JSIsEnabled == cut.Instance.OnInteractivityTestButtonClickMessage.Length > 0,
            JSIsEnabled?null:"We are not yet modeling the correct lifecycle stage for nojs with our test context"
        );

        Assert.True(
           JSIsEnabled == interactiveButtonContent.Length > 0,
           JSIsEnabled ? null : "We are not yet modeling the correct lifecycle stage for nojs with our test context"
       );



    }

    /// <summary>
    /// This test is to show some comparison options for html as well as that NoJS is not yet sufficiently simulated
    /// </summary>
    [Fact]
    public async Task TestSetup_T_JSSetup_NoJSBrowserIsSimulated()
    {
        bool JSIsEnabled = false;
        using var ctxJSEnabled = new TestContext();
        using var noContextNeeded = new TestContext();

        var StaticOrNoJSRenderListHtml = noContextNeeded.RenderComponent<StaticOrNoJSRenderList>();

        var cut = ctxJSEnabled.RenderComponent<T_JSSetup>(parameters 
            => parameters.Add(p => p.ProvidedRenderModeText, 
                "We just want a parameter to see if it triggers missing param stage"));

        await Task.Delay(10000);
        //Assert

        cut.Find("ol").MarkupMatches(StaticOrNoJSRenderListHtml);


        Assert.Equal(JSIsEnabled, cut.Instance.LifeCycleRequiringJSExecuted);
        Assert.Equal(JSIsEnabled.ToString(), cut.Find("#LifeCycleRequiringJSExecuted").TextContent);
        Assert.True(ctxJSEnabled.JSInterop.Invocations.Count == 0);
     
    }

    

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public async Task TestSetup_T_JSSetup_RenderStageList(bool JSIsEnabled)
    {
        // Arrange
        TestContext ctxJSEnabled = GetTestContext(JSIsEnabled);

        // Act
        var cut = ctxJSEnabled.RenderComponent<T_JSSetup>();

        //This test we will just await rather than checking for state
        await Task.Delay(10000);

        var listOfRendermodesComponentHTML = cut.Find(".life-cycle-stage-list").TextContent;



        // Assert

        Assert.True(JSIsEnabled  == cut.Instance.LifecycleStages.Any(stage => stage.Contains("OnAfterRenderAsync")));

        @if (!JSIsEnabled)
        {
            Assert.DoesNotContain("OnAfterRenderAsync", listOfRendermodesComponentHTML);
        }


    }


    [Fact]
    public void Service_Setup_Test_Fallback()
    {

        // Arrange
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());

        // Act
        var cut = ctx.RenderComponent<T_BaseComponent>();

        // Assert
        Assert.Equal("DefaultTestTitleText", cut.Find("h1").TextContent);
        Assert.Equal("False", cut.Find(".TestJSIsEnabledClass").TextContent); // Check IJSEnabled autofixture defaults False
        Assert.Contains("TestingWhoAmI", cut.Find(".TestWhoAmIClass").TextContent);//Autofixture will take the name and add a guid
        Assert.False(cut.Instance.TestJSIsEnabled);//AutoFixture bool defaults False
        Assert.Equal("DefaultTestTitleText", cut.Instance.TestTitleText);

    }

    [Fact]
    public void Service_Setup_Test_Mock()
    {
        // Arrange
        var ctx = new TestContext(); 
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());

        // Create a mock of IGS_JSEnabled
        var mockJSEnabled = new Mock<IGS_JSEnabled>();
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(true); // Mock behavior for JSIsEnabled
        mockJSEnabled.Setup(js => js.TestingWhoAmI).Returns("MockedHost"); // Mock behavior for WhoAmI

        ctx.Services.AddScoped(_ => mockJSEnabled.Object);


        // Act
        var cut = ctx.RenderComponent<T_BaseComponent>();


        // Assert: Verify the component's behavior based on the mock
        //Using the elements
        Assert.Equal("DefaultTestTitleText", cut.Find("h1").TextContent); // Check title
        Assert.Equal("True", cut.Find(".TestJSIsEnabledClass").TextContent); // Check JSIsEnabled mock the mock doesnt seem to be overwriting the fallback
        Assert.Equal("MockedHost", cut.Find(".TestWhoAmIClass").TextContent); // Check WhoAmI mock
        Assert.True(cut.Instance.TestJSIsEnabled);
        Assert.NotNull(cut.Instance.TestWhoAmI);
        Assert.Equal("MockedHost", cut.Instance.TestWhoAmI);
        Assert.Equal("DefaultTestTitleText", cut.Instance.TestTitleText);

        //Arrange again
        // Here checking NoJS behaviour too
        mockJSEnabled.Setup(js => js.JSIsEnabled).Returns(false);

        //Act again
        cut = ctx.RenderComponent<T_BaseComponent>(); // Re-render component after mock change

        //Assert
        Assert.Equal("False", cut.Find(".TestJSIsEnabledClass").TextContent); // Verify updated mock behavior
        Assert.False(cut.Instance.TestJSIsEnabled);
    }

    [Fact]
    public void Service_Setup_Test_Fake()
    {
        // Arrange
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());
        ctx.Services.AddTestDouble_GS_StateServices();

        
        // Act
        var cut = ctx.RenderComponent<T_BaseComponent>();

        //Asserts

        Assert.True(cut.Find(".CharactersStateServiceClass").TextContent.Length > 0);
        Assert.NotNull(ctx.Services.GetService<IGS_CharactersStateService>().Characters);
        Assert.NotEmpty(ctx.Services.GetService<IGS_CharactersStateService>().Characters);

    }

    [Fact]
    public void Service_Setup_Test_MockedFake()
    {
        // Arrange
        var ctx = new TestContext();
        ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());
        ctx.Services.AddTestDouble_GS_StateServices();


        // Create a mock of IGS_JSEnabled
        var mockGS_CharactersStateService = new Mock<IGS_CharactersStateService>();
        mockGS_CharactersStateService.Setup(css => css.Characters)
            .Returns(
                new List<GE_CharacterModel> {
                    new GE_CharacterModel { FirstName = "MockedFirstNameTest" }
                    });

        ctx.Services.AddScoped(_ => mockGS_CharactersStateService.Object);


        // Act
        var cut = ctx.RenderComponent<T_BaseComponent>();

        //Asserts

        Assert.True(cut.Find(".CharactersStateServiceClass").TextContent.Length > 0);
        Assert.NotNull(ctx.Services.GetService<IGS_CharactersStateService>().Characters);
        Assert.NotEmpty(ctx.Services.GetService<IGS_CharactersStateService>().Characters);
        Assert.Equal("MockedFirstNameTest", cut.Find(".CharactersStateServiceClass").TextContent);

    }
}