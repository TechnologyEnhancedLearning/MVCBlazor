@using System.Text.Json;
@using Package.Shared.BlazorComponents.T_Components
@using Package.Shared.Entities.T_Entities
@using Serilog.Events
@using Serilog.Sinks.InMemory

@using Serilog.Sinks.InMemory.Assertions@* isnt working qqqq*@
@using FluentAssertions
@using Xunit.Abstractions


@code {

    private readonly Fixture _fixture;
    private readonly ITestOutputHelper _outputHelper;//qqqq do we need to clear the output between tests and if so doenst that stops async

    public T_ComponentWithLoggerTests(ITestOutputHelper outputHelper)//qqqq in memory sink here specifies serilog
    {
        // Initialize AutoFixture
        _fixture = new Fixture();
        _outputHelper = outputHelper;//qqqqq shouldnt this be new so not all test use it

    }


    private TestContext CreateTestContext(InMemorySink inMemorySink)//Require it so remember to test it
    {
        //Arrange

        var ctx = new TestContext();
        //ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());


        ctx.Services.AddLogging(_outputHelper, inMemorySink);//All this is doing is putting logs in the test runner logger

        return ctx;
    }

    //This is testing the logger the test insert so can check the configuration
    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_TestLoggerCorrectlyLogsLevels()
    {
        // Arrange
        InMemorySink inMemorySink = new InMemorySink(/* outputTemplate: "{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}" */);//Doesnt work
        var ctx = CreateTestContext(inMemorySink);

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        cut.Find("#PrivateMethodAttachedToButtonClick").Click();
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();

        //Asserts

        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Fatal);
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Warning);
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Debug);
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Information);


    }

    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_LogEventsLambdaLogicWorks()
    {
        // Arrange
        InMemorySink inMemorySink = new InMemorySink(/* outputTemplate: "{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}" */);//Doesnt work
        var ctx = CreateTestContext(inMemorySink);

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();

        //Assert
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Information && e.MessageTemplate.Text.Contains("This is my initial text"));


    }

    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_ComplexObjectFluentAssertionOnInMemorySinkWorks()
    {

        // Arrange
        InMemorySink inMemorySink = new InMemorySink(/* outputTemplate: "{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}" */);//Doesnt work
        var ctx = CreateTestContext(inMemorySink);

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        cut.Find("#PrivateMethodAttachedToButtonClick").Click();
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();


        //Asserts

        inMemorySink.Should()
            .HaveMessage("This is my initial text");


        //Assert log property for object
        inMemorySink.Should()
                .HaveMessage("Can i still deconstruct {@ComplexObj}")
               .Appearing().Once()
               .WithLevel(LogEventLevel.Information)
               .WithProperty("ComplexObj");


        var logEvent = inMemorySink.LogEvents.First(e => e.MessageTemplate.Text == "Can i still deconstruct {@ComplexObj}");



        var forecastSequence = (logEvent.Properties["ComplexObj"] as SequenceValue);
        var firstForecast = (StructureValue)forecastSequence.Elements.First();

        firstForecast.Properties.Should().SatisfyRespectively(
            p => p.Name.Should().Be("Date"),
            p => p.Name.Should().Be("TemperatureC"),
            p => p.Name.Should().Be("Summary"),
            p => p.Name.Should().Be("TemperatureF"),
            p => p.Name.Should().Be("LocationsWeatherAveragedFrom")
        );

        firstForecast.Properties.Should().SatisfyRespectively(
       date =>
       {
           date.Name.Should().Be("Date");
           date.Value.ToString().Should().Be("01/02/2024");
       },
       temp =>
       {
           temp.Name.Should().Be("TemperatureC");
           temp.Value.ToString().Should().Be("-5");
       },
       summary =>
       {
           summary.Name.Should().Be("Summary");
           summary.Value.ToString().Should().Be("\"Freezing\"");
       },
       tempF =>
       {
           tempF.Name.Should().Be("TemperatureF");
           tempF.Value.ToString().Should().Be("24");
       },
       locations =>
       {
           locations.Name.Should().Be("LocationsWeatherAveragedFrom");
           //Nested classes values and properties
           var locationArray = (locations.Value as SequenceValue).Elements;
           locationArray.Should().HaveCount(2);

           var firstLocation = (StructureValue)locationArray.First();
           firstLocation.Properties.Single().Value.ToString().Should().Be("\"Just want a complex object 1\"");
       }
       );

    }

    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_ComplexObjectFluentAssertionOnInMemorySinkWorks_IsDeconstructedObject()
    {

        // Arrange
        InMemorySink inMemorySink = new InMemorySink(/* outputTemplate: "{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}" */);//Doesnt work
        var ctx = CreateTestContext(inMemorySink);

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        cut.Find("#PrivateMethodAttachedToButtonClick").Click();
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();


        // Assert
        // Destructured

        //Because this is a list it seems to be treated as a scalar but in the immediate window
        /*

        var logEvent = inMemorySink.LogEvents.First(e => e.MessageTemplate.Text == "Can i still deconstruct {@ComplexObj}");

        logEvent.Properties["ComplexObj"];
        {[T_WeatherForecast { Date: 01/02/2024, TemperatureC: -5, Summary: "Freezing", TemperatureF: 24, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 01/03/2024, TemperatureC: 0, Summary: "Bracing", TemperatureF: 32, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 01/04/2024, TemperatureC: 10, Summary: "Chilly", TemperatureF: 49, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 01/05/2024, TemperatureC: 20, Summary: "Mild", TemperatureF: 67, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object
                     1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 01/06/2024, TemperatureC: 30, Summary: "Warm", TemperatureF: 85, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }]}
                        Elements: {Serilog.Events.LogEventPropertyValue[5]}
                _elements: {Serilog.Events.LogEventPropertyValue[5]}

                    */

                        inMemorySink.Should()
                                .HaveMessage("Can i still deconstruct {@ComplexObj}")
                                .Appearing().Once()
                                .WithLevel(LogEventLevel.Information)
                                .WithProperty("ComplexObj")
                                .HavingADestructuredObject();



    }

    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_SimpleObjectFluentAssertionOnInMemorySinkWorks_IsDeconstructedObject()
    {
        // Arrange
        InMemorySink inMemorySink = new InMemorySink(/* outputTemplate: "{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}" */);//Doesnt work
        var ctx = CreateTestContext(inMemorySink);

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        cut.Find("#PrivateMethodAttachedToButtonClick").Click();
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();


        // Assert
        // Destructured

        //Because its not a list it is coming through as deconstructed
        inMemorySink.Should()
                .HaveMessage("SimpleObj {@SimpleObj}")
                .Appearing().Once()
                .WithLevel(LogEventLevel.Information)
                .WithProperty("SimpleObj")
                .HavingADestructuredObject();
    }

    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_SimpleObjectFluentAssertionOnInMemorySinkWorks_ScopedLogWorks()
    {
        // Arrange
        InMemorySink inMemorySink = new InMemorySink(/* outputTemplate: "{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}" */);//Doesnt work
        var ctx = CreateTestContext(inMemorySink);

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        cut.Find("#PrivateMethodAttachedToButtonClick").Click();
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();

         var logEvent = inMemorySink.LogEvents.First(e => e.MessageTemplate.Text == "I'm scoped");


        logEvent.Properties.Should().ContainKey("UserId");
        logEvent.Properties["UserId"].ToString().Should().Be("\"12345\"");

        
        logEvent.Properties.Should().ContainKey("UserId")
            .WhoseValue.ToString().Should().Be("\"12345\"");
        logEvent.Properties.Should().ContainKey("OrderId")
            .WhoseValue.ToString().Should().Be("\"ORD-789\"");
        logEvent.Properties.Should().ContainKey("PaymentId")
            .WhoseValue.ToString().Should().Be("\"PAY-456\"");


        // Assert
        //Because its not a list it is coming through as deconstructed
        //Documentation has examples like this
                    //Unsure why "and" isnt recognised [github docs](https://github.com/serilog-contrib/SerilogSinksInMemory/tree/master?tab=readme-ov-file#asserting-properties-on-messages)
        // inMemorySink.Should()
        //     .HaveMessage("SimpleObj {@SimpleObj}")
        //     .Appearing().Once()
        //     .WithLevel(LogEventLevel.Information) // If you need to assert the level
        //     .WithProperty("SimpleObj") // Assert presence of SimpleObj property
        //     .And
        //     .WithProperty("UserId")
        //     .WithValue("12345")
        //     .And
        //     .WithProperty("OperationType")
        //     .WithValue("checkout")
        //     .And
        //     .WithProperty("RequestId")
        //     .WithValue("req-123");


    }          
}
