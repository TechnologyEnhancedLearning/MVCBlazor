@using System.Text.Json;
@using Package.Shared.BlazorComponents.T_Components
@using Package.Shared.Entities.T_Entities
@using Serilog.Events
@using Serilog.Sinks.InMemory

@using Serilog.Sinks.InMemory.Assertions@* isnt working qqqq*@
@using FluentAssertions
@using Xunit.Abstractions


@code {

    private readonly Fixture _fixture;
    private readonly ITestOutputHelper _outputHelper;//qqqq do we need to clear the output between tests and if so doenst that stops async



    public T_ComponentWithLoggerTests(ITestOutputHelper outputHelper)//qqqq in memory sink here specifies serilog
    {
        // Initialize AutoFixture
        _fixture = new Fixture();
        _outputHelper = outputHelper;//qqqqq shouldnt this be new so not all test use it

    }


    private TestContext CreateTestContext(InMemorySink inMemorySink)//Require it so remember to test it
    {
        //Arrange

        var ctx = new TestContext();
        //ctx.Services.AddFallbackServiceProvider(new FallbackServiceProvider());


        ctx.Services.AddLogging(_outputHelper, inMemorySink);//All this is doing is putting logs in the test runner logger

        return ctx;
    }

    [Trait("Category", "Unit Test")]
    [Fact]
    public void Logger_ReturnsPrivateValues()
    {


        // Arrange
        InMemorySink inMemorySink = new InMemorySink();
        var ctx = CreateTestContext(inMemorySink);

        // Example: Logging a structured object
        List<T_WeatherForecast> weatherForecasts = new List<T_WeatherForecast>()
        {
            new T_WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now.AddDays(1)), TemperatureC = -5, Summary = "Freezing" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now.AddDays(2)), TemperatureC = 0, Summary = "Bracing" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now.AddDays(3)), TemperatureC = 10, Summary = "Chilly" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now.AddDays(4)), TemperatureC = 20, Summary = "Mild" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now.AddDays(5)), TemperatureC = 30, Summary = "Warm" }
        };

        // Act
        var cut = ctx.RenderComponent<T_ComponentWithLogger>();
        cut.Find("#PrivateMethodAttachedToButtonClick").Click();

        //Asserts
        List<Serilog.Events.LogEvent> logEvents = inMemorySink.LogEvents.ToList();
        //logEvents.Should()
        inMemorySink.Should().HaveMessage("myKey");
        //We are not restricting with config or set up
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Fatal);
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Warning);
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Debug);
        Assert.Contains(logEvents, e => e.Level == LogEventLevel.Information);
       
       Assert.Contains(logEvents, e => e.Level == LogEventLevel.Information && e.MessageTemplate.Text.Contains("This is my initial text"));
       Assert.Contains(logEvents, e => e.Level == LogEventLevel.Information && e.MessageTemplate.Text.Contains("Later Info Call"));

       
       // var jsonString = logEvents[7].Properties["ComplexObj"].ToString();
        //var myObject = JsonSerializer.Deserialize<List<T_ComponentWithLogger>>(jsonString);

/* Before applying the formatter
                   "[T_WeatherForecast { Date: 02/14/2025, TemperatureC: -5, Summary: \"Freezing\", TemperatureF: 24, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: \"Just want a complex object 1\" }, T_WeatherReadingLocation { LocationName: \"Just want a complex object 2\" }] }, T_WeatherForecast { Date: 02/15/2025, TemperatureC: 0, Summary: \"Bracing\", TemperatureF: 32, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: \"Just want a complex object 1\" }, T_WeatherReadingLocation { LocationName: \"Just want a complex object 2\" }] }, T_WeatherForecast { Date: 02/16/2025, TemperatureC: 10, Summary: \"Chilly\", TemperatureF: 49, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: \"Just want a complex object 1\" }, T_WeatherReadingLocation { LocationName: \"Just want a complex object 2\" }] }, T_WeatherForecast { Date: 02/17/2025, TemperatureC: 20, Summary: \"Mild\", TemperatureF: 67, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: \"Just
                want a complex object 1\" }, T_WeatherReadingLocation { LocationName: \"Just want a complex object 2\" }] }, T_WeatherForecast { Date: 02/18/2025, TemperatureC: 30, Summary: \"Warm\", TemperatureF: 85, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: \"Just want a complex object 1\" }, T_WeatherReadingLocation { LocationName: \"Just want a complex object 2\" }] }]"

                {[T_WeatherForecast { Date: 02/14/2025, TemperatureC: -5, Summary: "Freezing", TemperatureF: 24, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/15/2025, TemperatureC: 0, Summary: "Bracing", TemperatureF: 32, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/16/2025, TemperatureC: 10, Summary: "Chilly", TemperatureF: 49, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/17/2025, TemperatureC: 20, Summary: "Mild", TemperatureF: 67, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object
                 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/18/2025, TemperatureC: 30, Summary: "Warm", TemperatureF: 85, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }]}
                    Elements: {Serilog.Events.LogEventPropertyValue[5]}
                    _elements: {Serilog.Events.LogEventPropertyValue[5]}

                {[T_WeatherForecast { Date: 02/14/2025, TemperatureC: -5, Summary: "Freezing", TemperatureF: 24, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/15/2025, TemperatureC: 0, Summary: "Bracing", TemperatureF: 32, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/16/2025, TemperatureC: 10, Summary: "Chilly", TemperatureF: 49, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/17/2025, TemperatureC: 20, Summary: "Mild", TemperatureF: 67, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object
                1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }, T_WeatherForecast { Date: 02/18/2025, TemperatureC: 30, Summary: "Warm", TemperatureF: 85, LocationsWeatherAveragedFrom: [T_WeatherReadingLocation { LocationName: "Just want a complex object 1" }, T_WeatherReadingLocation { LocationName: "Just want a complex object 2" }] }]}
            Elements: {Serilog.Events.LogEventPropertyValue[5]}
            _elements: {Serilog.Events.LogEventPropertyValue[5]}
                */

        //qqqqqqqqqqqqq
        // this looks like may work actually
        //logEvents[7].Properties["ComplexObj"]

        // var logEventProperty = logEvents[0].Properties.Where(x => x.Key == "myKey").Single();
        // var propertyValue = logEventProperty.Value as ScalarValue;

        // logEventProperty.Key.Should().Be("myKey");
        // propertyValue!.Value.Should().Be("expectedValue");

        //NEXT TIME qqqqqqq -> just try serialising in instead of serialising out
        /*
           var logEvent = TestCorrelator.GetLogEventsFromCurrentContext().Single();
            // qqqqqqqqqqqq just try without bothering with the library - from the serilog TestCorrelator
            var logEventProperty = logEvent.Properties.Where(x => x.Key == expectedKey).Single();
            var propertyValue = logEventProperty.Value as ScalarValue;

            logEventProperty.Key.Should().Be(expectedKey);
            propertyValue!.Value.Should().Be(expectedValue);


         */


        //logEvents[0].Should().

        // logEvents
        //    .Should()
        //    .HaveMessage("Later Info Call");

        // InMemorySink
        //     .Instance
        //     .Should()
        //     .HaveMessage("Later Info Call");
        //qqqqq i want to use the specific one
        // InMemorySink.Instance
        //     .Should()
        //     .HaveMessage("Later Info Call");

        // Console.Write(logEvents);

        // foreach (var logEvent in logEvents)
        // {
        //     if (logEvent.Properties.TryGetValue("MyObject", out var propertyValue))
        //     {
        //         if (propertyValue is Serilog.Events.StructureValue structureValue)
        //         {
        //             var json = JsonConvert.SerializeObject(structureValue.Properties.ToDictionary(kvp => kvp.Name, kvp => kvp.Value.ToString()));
        //             var deserializedObject = JsonConvert.DeserializeObject<T_WeatherForecast>(json);
        //             Console.WriteLine(deserializedObject.Summary); // Output: Test Object
        //         }
        //     }
        // }



        // var structuredLogEvent = logEvents.FirstOrDefault(e =>
        //     e.Level == LogEventLevel.Information &&
        //     e.MessageTemplate.Text.Contains("Object data should be in structure json"));

        // var jsonProperty = structuredLogEvent.Properties["WeatherForecasts"];
        // string jsonString = jsonProperty.ToString(); // Get the JSON string
        
        
        // qqqq not managing to pull out the structured object
        // not managed to use fluent seertion on it
        //string jsonString = "{}";//qqqqqqqqqqqq
        //List<T_WeatherForecast> deserializedForecastsFromLog = JsonConvert.DeserializeObject<List<T_WeatherForecast>>(jsonString);

        //Assert.Equivalent(weatherForecasts[2], deserializedForecastsFromLog[2]);

    }
}
