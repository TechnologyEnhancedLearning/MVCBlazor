@inject IT_StateCounterTestService T_StateCounterTestService
@implements IAsyncDisposable 
@inject ILocalStorageService LocalStorage 
@*IDisposable*@
@inherits GB_ComponentBase



<div style="padding: 2rem; margin: 2rem; border-radius: 1rem; background-color: #f0f0f0; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
     <h3>I am a Blazor Component</h3>
    <div style="margin-bottom: 2rem;">
        <h2 style="color: #333; margin-bottom: 1rem;">State Management Test</h2>
        <h3>Component Created at: @ComponentLastReinitialisedAt</h3>
        <h3>T_StateCounterTestService at: @T_StateCounterTestService.ServiceCreatedAt</h3>
        <h3>Service made by: @T_StateCounterTestService.WhoMadeMe</h3>
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
            <div style="background-color: @GenerateBackgroundColor(); white; padding: 1rem; border-radius: 0.5rem; text-align: center;">
                <h3>Component State</h3>
                <p style="font-size: 2rem; font-weight: bold; color: #2563eb;">@CounterStateInComponent</p>
                <button @onclick="IncrementComponentState"
                        style="background: #2563eb; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.25rem; cursor: pointer;">
                    Increment Component
                </button>
            </div>

            <div style="background-color: @GenerateBackgroundColor(); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                <h3>Service State</h3>
                <p style="font-size: 2rem; font-weight: bold; color: #2563eb;">@CounterStateInWASMService</p>
                <button @onclick="IncrementServiceState"
                        style="background: #2563eb; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.25rem; cursor: pointer;">
                    Increment WASM Service
                </button>
            </div>

            <div style="background-color: @GenerateBackgroundColor(); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                <h3>Storage State</h3>
                <p style="font-size: 2rem; font-weight: bold; color: #2563eb;">@CounterStateInStorage</p>
                <button @onclick="IncrementStorageState"
                        style="background: #2563eb; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.25rem; cursor: pointer;">
                    Increment Storage
                </button>
            </div>

            <div style="background-color: @GenerateBackgroundColor(); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                <h3>DB State</h3>
                <p style="font-size: 2rem; font-weight: bold; color: #2563eb;">@CounterStateInDB</p>
                <button @onclick="IncrementDBState"
                        style="background: #2563eb; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.25rem; cursor: pointer;">
                    Increment DB
                </button>
            </div>

            <div style="background-color: @GenerateBackgroundColor(); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                <h3>Session State : there is a blazored package for this and its unit test, will implement if useful</h3>

            </div>

           
        </div>
    </div>
</div>




@code
{




    /// <summary>
    /// This component is to explore, and demonstrate state
    /// We can use in the client to have state : *check exactly so its right*
    /// We can store it in a session so it is : **
    /// We can store it in storage so it is accessible : 
    /// We can send it to the db.
    /// We can start a fresh every time there is a browser change
    /// 
    /// </summary>

    public string CounterStateInComponent { get; set; } = "0";
    public string CounterStateInDB { get; set; } = "0";
    public string CounterStateInStorage { get; set; } = "0";
    public string CounterStateInWASMService { get; set; } = "0";
    public string ComponentIdentifier { get; set; }

    public DateTime ComponentLastReinitialisedAt;


    protected override async Task OnInitializedAsync()
    {
        
        ComponentIdentifier = "Component_" + Guid.NewGuid().ToString();
        Logger.LogInformation("LOGGING {component}", ComponentIdentifier);
        T_StateCounterTestService.CountInDBChanged += TriggerStateChangeCountInDbChangeAsync;
        T_StateCounterTestService.CountInStorageChanged += TriggerStateChangeCountInStorageChangedAsync;
        T_StateCounterTestService.CountInWASMServiceChanged += TriggerStateChangeCountInWASMServiceChanged;
        ComponentLastReinitialisedAt = DateTime.UtcNow;
      


        // Trigger initial value retrieval not using the triggers to do this as will have 3 statehas changed
        CounterStateInWASMService = T_StateCounterTestService.GetCountFromWASMService();


        try
        {
            CounterStateInStorage = await T_StateCounterTestService.GetCountFromStorage();
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop calls cannot be issued"))
        {
            //!!! This will be the prerender
            var whoami = T_StateCounterTestService.WhoMadeMe;

        }


        var whoami2 = T_StateCounterTestService.WhoMadeMe;

        CounterStateInDB = await T_StateCounterTestService.GetCountFromDB();

    }



    public void IncrementComponentState()
    {
        CounterStateInComponent = (int.Parse(CounterStateInComponent) + 1).ToString();

    }



    public void TriggerStateChangeCountInWASMServiceChanged()
    {
        CounterStateInWASMService = T_StateCounterTestService.GetCountFromWASMService();
        StateHasChanged();//needed because triggered outside of render cycle in another component/service
    }

    public async void TriggerStateChangeCountInStorageChangedAsync()
    {

        CounterStateInStorage = await T_StateCounterTestService.GetCountFromStorage();
        await InvokeAsync(StateHasChanged);//because async
    }

    public async void TriggerStateChangeCountInDbChangeAsync()
    {
        //await InvokeAsync(StateHasChanged);//lets not refresh everything and reget everything from the service



        CounterStateInDB = await T_StateCounterTestService.GetCountFromDB();
        await InvokeAsync(StateHasChanged);//because async
    }

    public void IncrementServiceState()
    {
        T_StateCounterTestService.IncrementCountInWASMService();

        //await InvokeAsync(StateHasChanged); //change to this if useful for illustration of behaviour. Will see not change then big jump as move between components.
    }

    public async Task IncrementDBState()
    {
        await T_StateCounterTestService.IncrementCountInDB();

        //await InvokeAsync(StateHasChanged); //change to this if useful for illustration of behaviour. Will see not change then big jump as move between components.
    }

    public async Task IncrementStorageState()
    {
        await T_StateCounterTestService.IncrementCountInStorage();

        //await InvokeAsync(StateHasChanged); //change to this if useful for illustration of behaviour. Will see not change then big jump as move between components.
    }


    public async ValueTask DisposeAsync()//void Dispose()
    {
        // Unsubscribe from events to prevent memory leak


        T_StateCounterTestService.CountInDBChanged -= TriggerStateChangeCountInDbChangeAsync;
        T_StateCounterTestService.CountInStorageChanged -= TriggerStateChangeCountInStorageChangedAsync;
        T_StateCounterTestService.CountInWASMServiceChanged -= TriggerStateChangeCountInWASMServiceChanged;

        

        try
        {

            await LocalStorage.SetItemAsync($"{DateTime.Now.ToString("yyyyMMdd__HH_mm_ss_ffff")}_InsertedByComponentMethod", "Component" ?? "Unknown");
            await T_StateCounterTestService.OnDisposeSaveObjectToStorage(count: "999", countType: "disposeTest", userName: "TestUser", typeDisposed: "Component", individualIdentifierForDisposed: ComponentIdentifier);
            //Console.WriteLine("Component Disposing");
        }
        catch (Exception ex)
        {
            //Console.WriteLine($"Error during DisposeSaveObjectToStorage: {ex.Message}");
        }
        //await ValueTask.CompletedTask;// for now
    }




    // Just for styling
    //public int AdditionalColourStepsInt { get; set; } = 0;  // Hook this up to counts if want to see visibale difference per count change
    public int AdditionalColourStepsInt => Int32.Parse(CounterStateInComponent) + Int32.Parse(CounterStateInDB) + Int32.Parse(CounterStateInStorage) + Int32.Parse(CounterStateInWASMService);  // Hook this up to counts if want to see visibale difference per count change
    [Parameter] public int StartColourStepInt { get; set; } = 1;
    private string GenerateBackgroundColor()
    {
        int totalColors = 20; // Fixed total variations
        int hueStep = 18; // How much the hue shifts per step

        // Combine start and additional steps
        int ColourSteps = (StartColourStepInt + AdditionalColourStepsInt) % totalColors;

        // Compute final hue
        int hue = (ColourSteps * hueStep) % 360; // Keep hue within 0-359

        int saturation = 50; // Keep it moderate
        int lightness = 85;  // Soft pastel background

        return $"hsl({hue}, {saturation}%, {lightness}%)";
    }

}