@using Microsoft.Extensions.Logging;
@* @using Serilog.Context No we want it to agnostic*@
@inject ILogger<T_ComponentWithLogger> _logger;
@inherits ComponentBase

<h3>T_ComponentWithLogger</h3>
<h3>Weather Forecast</h3>
<p>@StringMessageIsPrivateAndHardToUnitTest</p>
<button id="PrivateMethodAttachedToButtonClick" @onclick="IAmPrivateClickTheButtonAndUseTheLoggerToUnitTestMe">Generate Forecast</button>

@if (ForecastsComplexObjectToDisplay.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
                <th>String joined location</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in ForecastsComplexObjectToDisplay)
            {
                <tr>
                    <td>@forecast.Date</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                            <td>@string.Join(", ", forecast.LocationsWeatherAveragedFrom.Select(x => x.LocationName))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code{

    private List<string> SummariesArePrivateAndHardToUnitTest = new List<string>();
    private string StringMessageIsPrivateAndHardToUnitTest = "This is my initial text";
    private List<T_WeatherForecast> ForecastsComplexObjectToDisplay { get; set; } = new List<T_WeatherForecast>(){
        new T_WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now.AddDays(-10000)), TemperatureC = -9999, Summary = "Some initial placeholder data" }
    };

    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation(StringMessageIsPrivateAndHardToUnitTest);
    }

    private void LogTheDifferentLogLevels()
    {
        //Can be used to check the inserted loggers minimum levels setting is being respected

        _logger.LogInformation("This is an informational log.");  // This will be logged, but not captured by InMemorySink (since it's not Critical)
        _logger.LogDebug("This is a debug log.");                // This will be logged, but not captured by InMemorySink (since it's not Critical)
        _logger.LogWarning("This is a warning log.");            // This will be logged, but not captured by InMemorySink (since it's not Critical)
        _logger.LogError("This is an error log.");              // This will be logged, but not captured by InMemorySink (since it's not Critical)
        _logger.LogCritical("This is a Critical log!");


    }
    private void LogAPrivateString()
    {
        _logger.LogInformation(StringMessageIsPrivateAndHardToUnitTest);

    }
    private void LogAComplexObject()
    {
        _logger.LogInformation("Can i still deconstruct {@ComplexObj}", ForecastsComplexObjectToDisplay);
    }

    private void SetTheData()
    {
        StringMessageIsPrivateAndHardToUnitTest = "After Running The Method IAmPrivateUseTheLoggerToUnitTestMe This Is My Value";


        SummariesArePrivateAndHardToUnitTest = new List<string>(){
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };


        ForecastsComplexObjectToDisplay = new List<T_WeatherForecast>()
        {

            new T_WeatherForecast { Date = DateOnly.FromDateTime(new DateTime(2024, 1, 1).AddDays(1)), TemperatureC = -5, Summary = "Freezing" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(new DateTime(2024, 1, 1).AddDays(2)), TemperatureC = 0, Summary = "Bracing" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(new DateTime(2024, 1, 1).AddDays(3)), TemperatureC = 10, Summary = "Chilly" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(new DateTime(2024, 1, 1).AddDays(4)), TemperatureC = 20, Summary = "Mild" },
            new T_WeatherForecast { Date = DateOnly.FromDateTime(new DateTime(2024, 1, 1).AddDays(5)), TemperatureC = 30, Summary = "Warm" }
        };


    }
    private void IAmPrivateClickTheButtonAndUseTheLoggerToUnitTestMe()
    {
        SetTheData();
        LogTheDifferentLogLevels();
        LogAComplexObject();
        LogScopedObject();

    }

    private void LogScopedObject()
    {
        //qqqq is this useful    
        using (_logger.BeginScope(new Dictionary<string, List<T_WeatherForecast>> { { "CanScopeLogMyObj", ForecastsComplexObjectToDisplay } }))
        {
            _logger.LogInformation("Can i still deconstruct2 {@BeginScopeObj}", ForecastsComplexObjectToDisplay);
        }
    
    }

}
