
@inherits GB_ComponentBase
@typeparam TModel where TModel:IGE_ModelStateValidation
@* @implements IGB_AccessibleComponent We would apply accessible options to this component too*@
<h3>@Title</h3>

@if (showSubmissionCount)
{
    <div class="alert alert-success">
        Form submitted successfully! You have submitted the form @submissionCount times.
    </div>
}

<EditForm EditContext="@EditContext" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" method="post" action="@Action">
     <DataAnnotationsValidator /> 
     <CascadingValue Value="@formIsValid">
                @EditFormContents
     </CascadingValue>

    <GB_Validator  EditContext="@EditContext" FormModel="@FormModel"/>
 
    <GB_Button2 IsSubmitButtonForEditForm="true"
                ButtonSize="GB_ButtonSize.Medium"
                ButtonText="@SubmitButtonText"
                AriaLabel="@SubmitButtonAriaLabel"
                ToolTipTitle="@SubmitButtonTitle"
                AssistiveText="@SubmitButtonAssistiveText"
                ShowIcon="true"
                IconCssClass="bi bi-save"
                TabIndex="0"
                ButtonType=GB_ButtonType.Success
                NoJSActionUrl=""
                CustomCssClass=""
                />
    @* OnClick="() => HandleSubmit()"*@
    @* FormData = "null" *@

</EditForm>

@code {
    /// <summary>
    /// Form
    /// </summary>
    private EditContext EditContext { get; set; }

    [Parameter, EditorRequired]
    public required string Title { get; set; }

    [Parameter, EditorRequired]
    public required string Action { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnInvalidSubmit { get; set; }

    private bool showSubmissionCount { get; set; } = false;

    // Track the success status and submission count
    private bool isFormSubmitted = false;
    private int submissionCount = 0;

    // Maybe just an OR would be better
    private bool formIsValid => JSIsEnabled ? blazorFormIsValid : !FormModel.HasModelStateValidationErrors;
    private bool blazorFormIsValid = true;

    [Parameter, EditorRequired]
    public required TModel FormModel { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment EditFormContents { get; set; }

    /// <summary>
    /// Button
    /// </summary>
    [Parameter]
    public string SubmitButtonText { get; set; } = "Submit Button";


    /// /// <summary>
    /// Button Assistive
    /// </summary>
    [EditorRequired, Parameter]
    public required string SubmitButtonAriaLabel { get; set; }

    [EditorRequired, Parameter]
    public required string SubmitButtonTitle { get; set; }

    [EditorRequired, Parameter]
    public required string SubmitButtonAssistiveText { get; set; }


    ///<summary>
    /// Functionality
    /// </summary>

    protected override void OnInitialized()
    {
        EditContext = new EditContext(FormModel);

        //We don't need to manually do this unless nojs
        if (FormModel.HasModelStateValidationErrors) { EditContext.Validate(); }
    }

    // Handle the form submission
    private async Task HandleValidSubmit()
    {
        // Increment the submission count and mark the form as submitted
        submissionCount++;
        isFormSubmitted = true;
        blazorFormIsValid = true;
        // Invoke custom user-defined behavior if provided.
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync();
            showSubmissionCount = true;
        }

        await ResetFormStatusAsync();
        _ = ResetShowSubmissionCount();//fireforget

    }
    private async Task ResetShowSubmissionCount()
    {
        await Task.Delay(10000);
        showSubmissionCount = false;
        StateHasChanged();
    }
    private async Task ResetFormStatusAsync()
    {
        //await Task.Delay(3000);
        isFormSubmitted = false;
        //FormModel = new FormModel();

        //May not be needed
        EditContext = new EditContext(FormModel);
        EditContext.NotifyValidationStateChanged();

        StateHasChanged();
    }


    // Handle invalid form submission (triggered if validation fails)
    private async Task HandleInvalidSubmit()
    {
        
        isFormSubmitted = false;

        // Invoke custom user-defined behavior if provided.
        if (OnInvalidSubmit.HasDelegate)
        {
            await OnInvalidSubmit.InvokeAsync();
        }
        blazorFormIsValid = false;
    }

}