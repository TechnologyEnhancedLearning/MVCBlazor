@inherits GB_ComponentBase
@typeparam T where T:IGB_ModelStateValidation
<h3>GB_EditFormTitle : @Title</h3>

@if (isFormSubmitted)
{
    <div class="alert alert-success">
        Form submitted successfully! You have submitted the form @submissionCount times.
    </div>
}
@* EditContext="@EditContext" *@
<EditForm   Model="@Model" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" method="post" action="@Action">
     <DataAnnotationsValidator /> 
     <CascadingValue Value="@formIsValid">
        @EditFormContents
      </CascadingValue>

    <GB_Validator
        Model="@Model" 
        AspFor="@AspFor"
        EditContext="@EditContext"/>

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {
    [Parameter,EditorRequired]
    public RenderFragment EditFormContents { get; set; }

    [Parameter, EditorRequired]
    public string Title { get; set; }

    [Parameter, EditorRequired]
    public string Action { get; set; }

    private EditContext EditContext;

    [Parameter,EditorRequired]
    public string AspFor { get; set; }


    [Parameter, EditorRequired]
    public T Model { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }


    // Track the success status and submission count
    private bool isFormSubmitted = false;
    private int submissionCount = 0;
 
    // Maybe just an OR would be better 
    private bool formIsValid => JSIsEnabled ? blazorFormIsValid : !Model.HasModelStateValidationErrors;
    private bool blazorFormIsValid = true;


    
    protected override void OnInitialized()
    {
        if (Model == null)
        {
            throw new ArgumentNullException(nameof(Model), "Model cannot be null.");
        }
        EditContext = new EditContext(Model);
    }

    // Handle the form submission
    private async Task HandleValidSubmit()
    {
        // Increment the submission count and mark the form as submitted
        submissionCount++;
        isFormSubmitted = true;
        blazorFormIsValid = true;
        // Invoke custom user-defined behavior if provided.
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync(EditContext);
        }

        await ResetFormStatusAsync();

    }

    private async Task ResetFormStatusAsync()
    {
        await Task.Delay(3000);
        isFormSubmitted = false;
        StateHasChanged();
    }


    // Handle invalid form submission (triggered if validation fails)
    private async Task HandleInvalidSubmit()
    {
        
        isFormSubmitted = false;

        // Invoke custom user-defined behavior if provided.
        if (OnInvalidSubmit.HasDelegate)
        {
            await OnInvalidSubmit.InvokeAsync(EditContext);
        }
        blazorFormIsValid = false;
    }



}