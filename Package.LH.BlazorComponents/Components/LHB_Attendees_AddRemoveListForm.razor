@inherits GB_ComponentBase 
@inject ILHS_AttendeesStateService LHS_AttendeesStateService
<GB_ComponentWrapper WrapperTitle="Meeting">
    <GB_EditForm 
        Title=@FormTitleForAddAttendee 
        Action="@ActionForAddAttendee" 
        SubmitButtonText="@SubmitNameForAddAttendee"
        FormModel="@newAttendee" 
        OnValidSubmit="@OnValidSubmitForAddAttendee" 
        OnInvalidSubmit="@OnInvalidSubmitForAddAttendee"
        SubmitButtonAriaLabel="Add an attendee to the meeting list"
        SubmitButtonTitle="Add attendee"
        SubmitButtonAssistiveText="Adds an attendee"
        >
            <EditFormContents>
            @* this could be extracted as label input and validation, or a first second name generic component - would need our own version of validation message to handle nojs*@
            <div>
                    <label for="@($"newFirstName-{UniqueId}")">First Name:</label>
                    <InputText  DisplayName="First Name" placeholder="Enter first name"  @bind-Value="@newAttendee.FirstName" class="form-control" id="@($"newFirstName-{UniqueId}")" required/>
                    <ValidationMessage For="@(() => newAttendee.FirstName)" /> 
            </div>
            <div>
                    <label for="@($"newSecondName-{UniqueId}")">Second Name:</label>
                    <InputText  DisplayName="Second Name" placeholder="Enter Second name"  @bind-Value="@newAttendee.SecondName" class="form-control" id="@($"newSecondName-{UniqueId}")" required/>
                    <ValidationMessage For="@(() => newAttendee.SecondName)" />
            </div>
        </EditFormContents>
    </GB_EditForm>
</GB_ComponentWrapper>
  
@if (LHS_AttendeesStateService.DataIsLoaded == false  )
{
    if (halfSecondPassed == true)
    {
        <h1>Loading ...</h1>
    }
    else
    {
        //Don't anything it will probably be loaded in a flash
                
    }
}
else
{
    @* This works but lets avoid the complication for this example : Items=""@(((InitialiseWithControllerLHS_AttendeesStateServiceData && !LHS_AttendeesStateService.DataIsLoaded)?ListAttendeesProvidedByView:LHS_AttendeesStateService.Attendees))"*@
    <GB_ListWithButtons 
            Items="LHS_AttendeesStateService.Attendees" 
            ListTitle="Attendee List"
            GetItemText="@(attendee => attendee.ToString())"
            ListButton="@(RenderDangerButton)" />

    @if(JSIsEnabled){

            <GB_Button2 
                IsSubmitButtonForEditForm="false"
                ButtonSize="GB_ButtonSize.Medium"
                ButtonText="Set Database To This"
                AriaLabel="Save the current list to the database"
                ToolTipTitle="Save List"
                AssistiveText="Click to save the current list"
                ShowIcon="true"
                IconCssClass="bi bi-save"
                TabIndex="0"
                ButtonType=GB_ButtonType.Success
                NoJSActionUrl=""
                CustomCssClass=""
                OnClick="() => HandleSubmit()" />
                @* FormData = "null" *@
      
    }

 
}
     

@code {
    

    //To enable NoJS to persist with validation failed data

    [Parameter]
    public LH_AttendeeFormModel newAttendee { get; set; } = new();

    private string ActionForRemoveAttendeeByTemporaryId { get; set; } = "/Attendees/NoJS/RemoveAttendeeByTemporaryId";
    private string ActionForAddAttendee { get; set; } = "/Attendees/NoJS/AddAttendee";
    private string SubmitNameForAddAttendee { get; set; } = "Submit : Add Attendee";

    //not in use really but so old components still work
    private string UniqueId { get; set; } = Guid.NewGuid().ToString();

    private bool halfSecondPassed { get; set; } = false; //otherwise it flashes loaded and you dont knwo what youve seen so if it take less than half a second to load dont show loading
    private string FormTitleForAddAttendee { get; set; } = "Add Attendee";



    protected override async Task OnInitializedAsync()
    {
        //Not stopping the flash
        _ = WaitHalfSecondBeforeShowingLoadingText();//fire forget - i dont think the logic is quite right
                                                     //await LHS_AttendeesStateService.LoadAttendeesAsync();
                                                     //Console.WriteLine("Blazor Component : Initialise");
        await LHS_AttendeesStateService.EnsureDataIsLoadedAsync(); //check the service is ready when it is do the next render stage as the data will now be available
                                                                   //Automatically reinitialises so dont need to tell it state has changed
    }

    // Handle the form submission
    private async Task OnValidSubmitForAddAttendee()
    {

        //Fire forget but would have service response object
        await LHS_AttendeesStateService.AddAttendeeAsync(newAttendee);
        
        newAttendee = new();
        

    }
    // Handle invalid form submission (triggered if validation fails)
    private void OnInvalidSubmitForAddAttendee()
    {
        //Nothing

    }

    private async Task RemoveAttendee(LH_AttendeeModel attendee)
    {
        await LHS_AttendeesStateService.RemoveAttendeeByTemporaryIdAsync(attendee.ClientTemporaryId);
        Console.WriteLine("Blazor Component : RemoveAttendee");
        StateHasChanged();//because we change the list in the service rather than changing a blazor parameter, blazor doesnt know its changed so we need to tell it the state has change
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("Blazor Component : HandleSubmit");
        await LHS_AttendeesStateService.ReplaceDBWithListAsync();
        Console.WriteLine("Blazor Component : Submit finished");

    }

    //Not resolved the reload flash replace when introduce loader
    private async Task WaitHalfSecondBeforeShowingLoadingText()
    {
        if (!halfSecondPassed)
        {
            // Wait for half a second
            await Task.Delay(500);
            if (!halfSecondPassed) //in case it updated e 
            {
                halfSecondPassed = true; // Set the flag after 0.5 seconds
                if (!LHS_AttendeesStateService.DataIsLoaded)
                {
                    StateHasChanged(); // Refresh UI we dont need to if already loaded
                }
            }
        }
    }


  

    private RenderFragment<LH_AttendeeModel> RenderDangerButton => attendee => @<GB_Button2
                        IsSubmitButtonForEditForm="false"
                        ButtonSize="GB_ButtonSize.Inline"
                        ButtonText="Remove"
                        AriaLabel=@($"Remove attendee {attendee.FirstName} {attendee.SecondName}")
                        ToolTipTitle="Remove the attendee from the list"
                        AssistiveText=@($"Remove attendee {attendee.FirstName} {attendee.SecondName} via inline buttons preceeding list items")
                        ShowIcon="true"
                        IconCssClass="bi bi-trash"
                        TabIndex="0"
                        ButtonType=GB_ButtonType.Danger
                        NoJSActionUrl="Attendees/NoJS/RemoveAttendeeByTemporaryId"
                        FormData=@(new Dictionary<string, string>(){ {"clientTemporaryId", attendee.ClientTemporaryId.ToString()} })
                        CustomCssClass=""
                        OnClick="() => RemoveAttendee(attendee)" 
                        />;
}
