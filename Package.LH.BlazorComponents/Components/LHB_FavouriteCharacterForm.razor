@inherits GB_ComponentBase
@inject IGS_CharactersStateService GS_CharactersStateService

<GB_EditForm Title=@FormTitle FormModel="@LHB_FavouriteCharacterFormModel" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit" Action="@Action" AspFor="@AspFor">
    <EditFormContents>
        <div class="form-group">
            @{
                string placeholderTxt = "We just want to see ModelStateErrors in nojs so let me be empty so i can error;";
            }
            <label for="TestModelStateWithRequired">placeholderTxt</label>
            <InputText id="TestModelStateWithRequired"
            class="form-control"
            DisplayName="@placeholderTxt"
            @bind-Value="LHB_FavouriteCharacterFormModel.TestModelStateWithRequired" />
            <ValidationMessage For="@(() => LHB_FavouriteCharacterFormModel.TestModelStateWithRequired)" />
        </div>
        <h1>"@LHB_FavouriteCharacterFormModel.FavouriteCharacterId : " @LHB_FavouriteCharacterFormModel.FavouriteCharacterId</h1>
        <GB_VCB_Radios
            TItem="GE_CharacterModel"
            TValue="int"
            ValueToSetPostName="@($"{nameof(LHB_FavouriteCharacterFormModel)}.{nameof(LHB_FavouriteCharacterFormModel.FavouriteCharacterId)}")"
            @bind-RadioListValueToSet="@LHB_FavouriteCharacterFormModel.FavouriteCharacterId"
            RadioGroupId=@($"characterRadioGroup-{"Cartoon.Id"}")
            RadioItems="@Characters" 
            AspFor="@AspFor" 
            Label="@Label" 
            HintText="@RadioListHint" 
            Class=""
            GetHint="@(character => "Click to select")"
            GetLabel="@(character => $"{character.ToString()}")"
            GetValue="@(character => character.Id)"
            IsPageHeading="@IsPageHeading"
            Required="@Required"
            RequiredClientSideErrorMessage=""
           />
         @*    SelectedValueChanged="@(value => LHB_FavouriteCharacterFormModel.FavouriteCharacterId = value)" /> - Built in when bind*@
    </EditFormContents>

</GB_EditForm>

@code {
    //   SelectedValueChanged="@OnFavouriteCharacterChanged"
    // private void OnFavouriteCharacterChanged(int value)
    // {
    //     LHB_FavouriteCharacterFormModel.FavouriteCharacterId = value;
    //     // Optionally, you can add additional logic here (e.g., validation, side-effects).
    // }

    [Parameter, EditorRequired]
    public string Action { get; set; }


    [Parameter, EditorRequired]
    public string AspFor { get; set; }

    [Parameter, EditorRequired]
    public bool Required { get; set; }

    /// <summary>
    /// if this is private then we cant get errors off it
    /// if it is provided we need to generate a list of these per cartoon model
    /// we could use the cartoon itself as the model qqqq
    /// Maybe as a DTO and add the selectedCharacterId to it and any other options for data changes
    /// </summary>
    /// 
    [Parameter]
    public LHB_FavouriteCharacterFormModel LHB_FavouriteCharacterFormModel { get; set; } = new();

    [Parameter]
    public string Label { get; set; } = "Label Not Set Would Be EditorRequired or null";

    [Parameter]
    public string RadioListHint { get; set; } = "Hint Not Set Would Be Required or Empty String";

    [Parameter]
    public bool IsPageHeading { get; set; } = true;


    [Parameter]
    public List<GE_CharacterModel> Characters { get; set; } = null; //For model seeding for speed

    private string FormTitle = "Favourite Character Form";

    protected override async Task OnInitializedAsync()
    {

        //If cartoon isnt provided then get it
        Characters = Characters ?? (await GS_CharactersStateService.GetCharactersAsync()).Data;
        LHB_FavouriteCharacterFormModel.FavouriteCharacterId = Characters.SingleOrDefault(x=>x.IsFavourite)?.Id??0;//Or default if no favourite set yet but will use zero for testing
        
    }






    

    // Handle the form submission
    private async Task OnValidSubmit()
    {
        //Fire forget but would have service response object
        await GS_CharactersStateService.SetCharacterAsFavouriteAsync(LHB_FavouriteCharacterFormModel.FavouriteCharacterId);

    }
    // Handle invalid form submission (triggered if validation fails)
    private void OnInvalidSubmit()
    {
        //Nothing
        
    }
}