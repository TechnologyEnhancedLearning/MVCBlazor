@inherits GB_ComponentBase
@inject IGS_CharactersStateService GS_CharactersStateService
<GB_ComponentWrapper WrapperTitle="Characters">
    <GB_EditForm 
        Title=@FormTitle 
        FormModel="@LHB_FavouriteCharacterFormModel" 
        OnValidSubmit="@OnValidSubmit" 
        OnInvalidSubmit="@OnInvalidSubmit" 
        Action="@Action" 
        SubmitButtonAriaLabel="Save favourite character"
        SubmitButtonAssistiveText="This button saves favourite character"
        SubmitButtonText="Save Favourite Character"
        SubmitButtonTitle="Save Favourite Character"
    >
        <EditFormContents>
            <div class="form-group" style="margin:10px;padding:10px;">
                @{
                    string placeholderTxt = "We just want to see ModelStateErrors in nojs so let me be empty so i can error";
                }
                <label for="TestModelStateWithRequired">@placeholderTxt</label>
                <InputText id="TestModelStateWithRequired"
                class="form-control"
                DisplayName="@(placeholderTxt)"
                @bind-Value="LHB_FavouriteCharacterFormModel.TestModelStateWithRequired" />
                <ValidationMessage For="@(() => LHB_FavouriteCharacterFormModel.TestModelStateWithRequired)" />
            </div>
            @if (CharactersAreLoading)
            {
                <h3>...Characters Are Loading</h3>
            }else{
                <div style="margin:10px;padding:10px;">
                    <GB_VCB_Radios
                        TItem="GE_CharacterModel"
                        TValue="int"
                        ValueToSetPostName="@($"{nameof(LHB_FavouriteCharacterFormModel)}.{nameof(LHB_FavouriteCharacterFormModel.FavouriteCharacterId)}")"
                        @bind-RadioListValueToSet="@LHB_FavouriteCharacterFormModel.FavouriteCharacterId"
                        RadioGroupId=@($"characterRadioGroup-{"Cartoon.Id"}")
                        RadioItems="@Characters" 
                        Label="@Label" 
                        HintText="@RadioListHint" 
                        Class=""
                        GetHint="@(character => "Click to select")"
                        GetLabel="@(character => $"{character.ToString()}")"
                        GetValue="@(character => character.Id)"
                        IsPageHeading="@IsPageHeading"
                       />

               </div>
            }

   
        </EditFormContents>

    </GB_EditForm>
    <div style="margin:30px; padding:30px">
        <p>If when the radios are clicked this Id number doesn't change. Then the component is static not interactive. For example if render mode is static, prerendering is occuring or your browser has JS disabled : @LHB_FavouriteCharacterFormModel.FavouriteCharacterId</p>
    </div>
</GB_ComponentWrapper>
@code {

    [Parameter, EditorRequired]
    public string Action { get; set; }



    [Parameter]
    public GE_FavouriteCharacterFormModel LHB_FavouriteCharacterFormModel { get; set; } = null; 

    [Parameter]
    public string Label { get; set; } = "Label Not Set Would Be EditorRequired or null";

    [Parameter]
    public string RadioListHint { get; set; } = "Hint Not Set Would Be Required or Empty String";

    [Parameter]
    public bool IsPageHeading { get; set; } = true;

    // should this actually be from the service - for simplicity yes otherwise may alter list in component not in the service. 
    // nojs will get it from service first run anyway
    // changes can be kept in forms for nojs validation
    // state should only last life of service unless saved anyway??? forms can hold previously selected data
    [Parameter]
    public List<GE_CharacterModel> Characters { get; set; } = null; //For model seeding for speed

    private string FormTitle = "Required text field for submitting test input";
    private bool CharactersAreLoading { get; set; } = true;


    bool LHB_FavouriteCharacterFormModelProvided = false;

    protected override void OnInitialized()
    {
        LHB_FavouriteCharacterFormModelProvided = LHB_FavouriteCharacterFormModel != null;
        LHB_FavouriteCharacterFormModel = LHB_FavouriteCharacterFormModel ?? new();

    }

    protected override async Task OnInitializedAsync()
    {

        //If cartoon isnt provided then get it
        //We may provide the characters for speed
        //we may provide partially changed data from failed validation in a nojs scenario
        Characters = Characters ?? (await GS_CharactersStateService.GetCharactersAsync()).Data;

        //we may provide it when there is validation
        if (!LHB_FavouriteCharacterFormModelProvided)
        {

            LHB_FavouriteCharacterFormModel.FavouriteCharacterId = Characters.SingleOrDefault(x => x.IsFavourite)?.Id ?? 0;//Or default if no favourite set yet but will use zero for testing
            
        }

        CharactersAreLoading = false;
    }

    // Handle the form submission
    private async Task OnValidSubmit()
    {
        //Fire forget but would have service response object
        await GS_CharactersStateService.SetCharacterAsFavouriteAsync(LHB_FavouriteCharacterFormModel.FavouriteCharacterId);


    }
    // Handle invalid form submission (triggered if validation fails)
    private void OnInvalidSubmit()
    {
        //Nothing
        
    }
}