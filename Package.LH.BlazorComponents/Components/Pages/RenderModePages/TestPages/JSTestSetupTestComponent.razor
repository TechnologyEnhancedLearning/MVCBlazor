@page "/Test"
@rendermode InteractiveWebAssembly

<h3>@hydrationStatus</h3>
<h3>Life Cycle Stages So Far</h3>
<ol class="life-cycle-stage-list">
    @for (int i = 0; i < LifecycleStages.Count(); i++)
    {
        <li class="life-cycle-stage-item">@LifecycleStages[i]</li>

    }
</ol>

<h2>Test buttons individually they will reset each other potentially</h2>

<button id="OnInteractivityTestButton" @onclick="OnInteractivityTestButtonClick">InteractivityTestButton</button>
<h3 id="OnInteractivityTestButtonClickMessage">@OnInteractivityTestButtonClickMessage</h3>

<button id="TriggerRerenderButton" @onclick="TriggerRerender">Trigger Rerender</button>
<h3 id="OnInteractivityTestButtonClickMessage">@TriggerRerenderButtonClickCount.ToString()</h3>

@code {
    public string OnInteractivityTestButtonClickMessage = "";
    public int TriggerRerenderButtonClickCount = 0;
    // This will be called when the InteractivityTestButton is clicked.
    private void OnInteractivityTestButtonClick()
    {
        // Update the message to indicate the button was clicked.
        OnInteractivityTestButtonClickMessage = "InteractivityTestButton has been clicked, and this text was set.";

        // Optionally force a rerender (not usually needed as state changes trigger rerender).
        StateHasChanged();  // If you want to ensure the state changes trigger a rerender.
    }
    private void TriggerRerender()
    {
        TriggerRerenderButtonClickCount++;

    }

    public bool isHydrated = false; // Flag to track hydration state
    public string hydrationStatus = "I'm prerendered"; // Default hydrationStatus for prerendering



    public List<string> LifecycleStages { get; set; } = new();

    public override Task SetParametersAsync(ParameterView parameters)
    {
        LifecycleStages.Add("SetParametersAsync");
        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        LifecycleStages.Add("OnInitialized");

    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        LifecycleStages.Add("OnInitializedAsync");
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        LifecycleStages.Add("OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(2000);
        LifecycleStages.Add("OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        LifecycleStages.Add($"OnAfterRender(firstRender: {firstRender})");
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(1000);
        if (firstRender) // Executes only once after the component is rendered for the first time
        {
            // If the component is rendered for the first time on the client, mark as hydrated
            isHydrated = true;

            // Update the hydrationStatus to indicate that the component is hydrated
            hydrationStatus = "I'm hydrated";

            // Request a re-render of the component to display the updated hydrationStatus
            //StateHasChanged(); // We will rerender here but the rest of the function does not have a statehaschanged so will end up one behind
            //However our otherlife cycle stages are causing a rerender
        }
        await Task.Delay(1000);
        LifecycleStages.Add($"OnAfterRenderAsync(firstRender: {firstRender})");
        await base.OnAfterRenderAsync(firstRender);

    }
}