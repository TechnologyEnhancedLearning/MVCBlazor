@*This refactoring is not ideal. Would be more relevant with the service as source of truth and the add form and 
remove list both having a listner. but for the purpose of the test its useful
*@

@inherits GB_ComponentBase

@* This works but lets avoid the complication for this example : Items=""@(((InitialiseWithControllerLHS_AttendeesStateServiceData && !LHS_AttendeesStateService.DataIsLoaded)?ListAttendeesProvidedByView:LHS_AttendeesStateService.Attendees))"*@

<GB_ListWithButtons Items="Attendees"
                    ListTitle="Attendee List"
                    GetItemText="@(attendee => attendee.ToString())"
                    ListButton="@(RenderDangerButton)" />

@if (JSIsEnabled)
{

    <GB_Button2 IsSubmitButtonForEditForm="false"
                ButtonSize="GB_ButtonSize.Medium"
                ButtonText="Set Database To This"
                AriaLabel="Save the current list to the database"
                ToolTipTitle="Save List"
                AssistiveText="Click to save the current list"
                ShowIcon="true"
                IconCssClass="bi bi-save"
                TabIndex="0"
                ButtonType=GB_ButtonType.Success
                NoJSActionUrl=""
                CustomCssClass="update-db"
                OnClick="HandleSubmit" />

}

@code {

    private RenderFragment<LH_AttendeeModel> RenderDangerButton => (attendee) => @<GB_Button2 
            IsSubmitButtonForEditForm="false"
            ButtonSize="GB_ButtonSize.Inline"
            ButtonText="Remove"
            AriaLabel=@($"Remove attendee {attendee.FirstName} {attendee.SecondName}")
            ToolTipTitle="Remove the attendee from the list"
            AssistiveText=@($"Remove attendee {attendee.FirstName} {attendee.SecondName} via inline buttons preceeding list items")
            ShowIcon="true"
            IconCssClass="bi bi-trash"
            TabIndex="0"
            ButtonType=GB_ButtonType.Danger
            NoJSActionUrl="NoJSActionUrl"
            FormData=@(new Dictionary<string, string>(){ {"clientTemporaryId", attendee.ClientTemporaryId.ToString()} })
            CustomCssClass="danger-list-item-btn"
            OnClick="@(() => OnClick.InvokeAsync(attendee))" />;


    [Parameter, EditorRequired] public List<LH_AttendeeModel> Attendees { get; set; }
    [Parameter, EditorRequired] public string NoJSActionUrl { get; set; }
    [Parameter, EditorRequired] public EventCallback<LH_AttendeeModel> OnClick { get; set; }
    [Parameter, EditorRequired] public EventCallback HandleSubmit { get; set; }


}